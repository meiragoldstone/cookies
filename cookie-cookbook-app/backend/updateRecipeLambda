const AWS = require('aws-sdk');
const dynamodb = new AWS.DynamoDB.DocumentClient();

exports.handler = async (event) => {
    
    console.log("Starting lambda...");
    console.log("Event: ", event.body);
    console.log(event.queryStringParameters.listId);
     
    const requestBody = JSON.parse(event.body);
    let isIngredient = requestBody.isIngredient === "True";
    let listItems = await getListItems(event.queryStringParameters.listId, isIngredient);
    
    
    console.log("List Items: ", listItems);
    console.log("isIngredient: ", isIngredient);
    
  
    listItems.push(requestBody.newItem)
    
    console.log("pushed new item: ", requestBody.newItem)
    
    let params = ""
    
    if (isIngredient) {
        params = {
            TableName: 'cookies',
            Key: {
                'pk': event.queryStringParameters.listId
            },
            UpdateExpression: 'set #list = :value',
            ExpressionAttributeNames: {
                '#list': "list"
            },
            ExpressionAttributeValues: {
                ':value': listItems
            },
            ReturnValues: 'UPDATED_NEW'
        };
    }
    else {

        params = {
            TableName: 'cookies',
            Key: {
                'pk': event.queryStringParameters.listId
            },
            UpdateExpression: 'set #directions = :value',
            ExpressionAttributeNames: {
                '#directions': "directions"
            },
            ExpressionAttributeValues: {
                ':value': listItems
            },
            ReturnValues: 'UPDATED_NEW'
        };

        
    }

    
    try {
        const data = await dynamodb.update(params).promise();
        return {
            statusCode: 200,
            body: JSON.stringify(data.Attributes),
        };
    } catch (err) {
        console.error('Error updating item in DynamoDB', err);
        return {
            statusCode: 500,
            body: JSON.stringify('Error updating item in DynamoDB'),
        };
    }
};

async function getListItems(pk, isIngredient) {
    const params = {
        TableName: 'cookies',
        Key: {
            'pk': pk
        }
    };
    
    try {
        const data = await dynamodb.get(params).promise();
        if (!data.Item) {
            return {
                statusCode: 404,
                body: JSON.stringify('Item not found'),
            };
        }
        if (isIngredient){
            return data.Item.list; 
        }
        else {
            return data.Item.directions;
        }
        
    } catch (err) {
        console.error('Error retrieving item from DynamoDB', err);
        return {
            statusCode: 500,
            body: JSON.stringify('Error retrieving item from DynamoDB'),
        };
    }
}